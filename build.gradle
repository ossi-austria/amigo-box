buildscript {
    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath('com.android.tools.build:gradle:4.2.1')
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:1.5.10")
        classpath("de.mannodermaus.gradle.plugins:android-junit5:1.7.1.1")
        classpath("com.google.dagger:hilt-android-gradle-plugin:2.33-beta")
        classpath("androidx.navigation:navigation-safe-args-gradle-plugin:2.3.5")
//        classpath("org.barfuin.gradle.jacocolog:1.2.4")
//        classpath "org.jacoco:org.jacoco.core:0.8.5"
    }
}

allprojects {
    repositories {
        google()
        jcenter()
        maven { url "https://github.com/jitsi/jitsi-maven-repository/raw/master/releases" }
        //maven { url 'https://jitpack.io' }

    }
}

tasks.register("clean") {
    group = "clean"
    delete(rootProject.buildDir)
}

subprojects {
    tasks.withType(Test) {
        useJUnitPlatform()

        testLogging {
            events 'PASSED', 'FAILED', 'SKIPPED'
            debug {
                events 'PASSED', 'FAILED', 'SKIPPED', 'STANDARD_ERROR'
                exceptionFormat 'FULL'
            }
            info.events = debug.events
            info.exceptionFormat = debug.exceptionFormat
            afterSuite { desc, result ->
                if (!desc.parent) { // group the results in one
                    def output = "Results: ${result.resultType} (" +
                            "${result.testCount} tests, " +
                            "${result.successfulTestCount} successes, " +
                            "${result.failedTestCount} failures, " +
                            "${result.skippedTestCount} skipped)"
                    def startItem = '|  ', endItem = '  |'
                    def repeatLength = startItem.length() + output.length() + endItem.length()
                    println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
                }
            }
        }
        reports.junitXml.destination = file("${rootProject.buildDir}/test-results/${project.name}")
    }
    task showDirs {
        doLast {
            logger.quiet(rootDir.toPath().relativize(project.reportsDir.toPath()).toString())
            logger.quiet(rootDir.toPath().relativize(project.testResultsDir.toPath()).toString())
        }
    }

    plugins.withType(com.android.build.gradle.BasePlugin) {
        android {
            lintOptions {
                disable 'InvalidPackage'
                checkReleaseBuilds true
                abortOnError true
                checkAllWarnings true
                explainIssues true
                ignoreWarnings false
                quiet false
            }

            compileOptions {
                sourceCompatibility JavaVersion.VERSION_1_8
                targetCompatibility JavaVersion.VERSION_1_8
            }

            packagingOptions {
                exclude "META-INF/AL2.0"
                exclude "META-INF/LGPL2.1"
                exclude "META-INF/LICENSE*"
            }
        }
    }
}


